#BlueJ class context
comment0.target=Tarp
comment0.text=\r\n\ Write\ a\ description\ of\ class\ Tarp\ here.\r\n\ \r\n\ @author\ (your\ name)\ \r\n\ @version\ (a\ version\ number\ or\ a\ date)\r\n
comment1.params=lowerEnd\ higherEnd
comment1.target=Tarp(int[],\ int[])
comment1.text=\r\n\ Constructor\ for\ objects\ of\ class\ Tarp\r\n
comment10.params=
comment10.target=boolean\ getisVisible()
comment11.params=
comment11.target=shapes.Line\ getLine()
comment12.params=x
comment12.target=boolean\ collisionPuncture(int)
comment12.text=\r\n\ verifica\ si\ colisiono\ con\ un\ hueco\r\n
comment13.params=x
comment13.target=void\ makePuncture(int)
comment13.text=\r\n\ Agrega\ un\ hueco\ en\ una\ lona\r\n\ @param\ tarp\ es\ la\ ubicacion\ de\ la\ lona\ en\ la\ lista,\ x\ la\ posicion\ de\ la\ misma\r\n
comment14.params=x
comment14.target=void\ patchPuncture(int)
comment14.text=\r\n\ tapa\ un\ hueco\ \r\n\ @param\ int\ x\ la\ posicion\ a\ tapar\r\n
comment15.params=x
comment15.target=double\ rectFunction(double)
comment15.text=\r\n\ calcula\ el\ valor\ Y\ de\ la\ ecuacion\ de\ la\ lona\ dado\ un\ punto\ x\r\n\ @param\ double\ x,\ el\ valor\ en\ x\r\n
comment16.params=
comment16.target=void\ remove()
comment16.text=\r\n\ borra\ una\ lona\r\n
comment17.params=
comment17.target=void\ makeVisible()
comment17.text=\r\n\ hace\ visible\ la\ lona\ si\ es\ posible\r\n
comment18.params=
comment18.target=void\ makeInvisible()
comment18.text=\r\n\ hace\ invisible\ la\ lona\ si\ es\ posible\r\n
comment19.params=color
comment19.target=void\ changeColor(java.lang.String)
comment19.text=\r\n\ cambia\ el\ color\ de\ la\ lona\r\n\ @param\ String\ color,\ el\ color\ a\ cambiar\r\n
comment2.params=x1\ x2
comment2.target=void\ belongingTo(int,\ int)
comment20.params=otherTarp
comment20.target=int\ compareTo(Tarp)
comment3.params=
comment3.target=int\ getHeightValley()
comment4.params=
comment4.target=int[]\ getLowerEnd()
comment4.text=\r\n\ retorna\ las\ posiciones\ iniciales\ \r\n
comment5.params=
comment5.target=int[]\ getHigherEnd()
comment5.text=\r\n\ retorna\ las\ posiciones\ finales\r\n
comment6.params=
comment6.target=java.util.ArrayList\ getPunctures()
comment6.text=\r\n\ retorna\ los\ huecos\ que\ tenga\r\n
comment7.params=
comment7.target=void\ invisiblePuncture()
comment8.params=
comment8.target=void\ clearPunctures()
comment9.params=p
comment9.target=void\ addPunctures(Puncture)
numComments=21
