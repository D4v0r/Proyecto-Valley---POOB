#BlueJ class context
comment0.target=Rain
comment0.text=\r\n\ Write\ a\ description\ of\ class\ Rain\ here.\r\n\ \r\n\ @author\ (your\ name)\ \r\n\ @version\ (a\ version\ number\ or\ a\ date)\r\n
comment1.params=xPosition
comment1.target=Rain(int)
comment1.text=\r\n\ Constructor\ for\ objects\ of\ class\ Rain\r\n
comment10.params=tarps\ xNow
comment10.target=double[]\ collisionWith(java.util.ArrayList,\ double)
comment10.text=\r\n\ Verifica\ la\ colision\ de\ la\ lluvia\ con\ alguna\ lona\r\n\ @param\ tarps\ la\ lista\ de\ lonas,\ \r\n\ \r\n
comment11.params=colisionWithPuncture\ colisionTarp\ pendiente
comment11.target=double[]\ returnValues(boolean,\ boolean,\ double)
comment11.text=\r\n\ retorna\ los\ valores\ (si\ colisiono)\ para\ actuar\ \r\n\ @param\ colisionWithPuncture\ si\ choco\ algun\ hueco\ ,\ colisionTarp\ si\ choco\ alguna\ lona,\ pendiente\ la\ pendiente\r\n\ @return\ double[]\ una\ lista\ con\ los\ valores\ para\ que\ actue\ la\ lluvia\r\n
comment12.params=x0\ x1
comment12.target=boolean\ estaEnRangoX(int,\ int)
comment12.text=\r\n\ verifica\ si\ la\ lluvia\ esta\ en\ una\ rango\ x\ de\ alguna\ lona\r\n\ @param\ int\ x0,x1\ posiciones\ de\ la\ lona\r\n\ @return\ boolean\ si\ esta\ en\ el\ rango\r\n
comment13.params=y0\ y1
comment13.target=boolean\ estaEnRangoY(int,\ int)
comment13.text=\r\n\ verifica\ si\ la\ lluvia\ esta\ en\ una\ rango\ y\ de\ alguna\ lona\r\n\ @param\ int\ y0,y1\ las\ posiciones\ de\ la\ lona\r\n\ @return\ boolean\ si\ estan\ en\ el\ rango\r\n
comment14.params=
comment14.target=int\ getHeightValley()
comment15.params=
comment15.target=double\ getxPosition()
comment16.params=valor
comment16.target=void\ setxPosition(double)
comment17.params=
comment17.target=double\ getyPosition()
comment18.params=valor
comment18.target=void\ setyPosition(double)
comment19.params=
comment19.target=java.util.ArrayList\ getTarps()
comment2.params=color
comment2.target=void\ changeColor(java.lang.String)
comment2.text=\r\n\ cambia\ el\ color\r\n
comment20.params=
comment20.target=java.util.ArrayList\ getVineyards()
comment21.params=valor
comment21.target=void\ addStream(shapes.Rectangle)
comment22.params=
comment22.target=java.lang.String\ getColor()
comment23.params=
comment23.target=java.util.ArrayList\ getStream()
comment24.params=
comment24.target=double\ getXPosition()
comment24.text=\r\n\ retorna\ la\ posicion\ en\ x\r\n
comment25.params=r
comment25.target=int\ compareTo(Rain)
comment3.params=
comment3.target=void\ makeVisible()
comment3.text=\r\n\ hace\ visible\ la\ lluvia\ si\ es\ posible\r\n
comment4.params=
comment4.target=void\ makeInvisible()
comment4.text=\r\n\ hace\ invisible\ la\ lluvia\ si\ es\ posible\r\n
comment5.params=x
comment5.target=void\ start(int)
comment5.text=\r\n\ Empieza\ a\ correr\ el\ agua\r\n\ @param\ x\ siendo\ la\ posicion\ de\ la\ lluvia\r\n
comment6.params=
comment6.target=shapes.Rectangle\ doRectangle()
comment6.text=\r\n\ Crea\ un\ rectangulo\ que\ sera\ una\ parte\ de\ la\ lluvia\r\n
comment7.params=tarps\ xNow
comment7.target=void\ rainOnTarp(java.util.ArrayList,\ int)
comment7.text=\r\n\ \r\n\ @param\ tarps\ lista\ de\ lonas,\ la\ posicion\ de\ el\ agua,\r\n
comment8.params=vineyards\ y\ x
comment8.target=int\ vineyardCollision(java.util.ArrayList,\ double,\ double)
comment8.text=\r\n\ Verifica\ la\ colision\ contra\ un\ vi\u00F1edo\r\n\ @param\ vineyards\ la\ lista\ de\ los\ vi\u00F1edos,\ \r\n\ \r\n
comment9.params=
comment9.target=boolean\ stillFalling()
numComments=26
